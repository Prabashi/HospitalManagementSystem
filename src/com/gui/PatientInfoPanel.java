/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.gui;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.text.DateFormat;
import java.text.NumberFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Locale;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

/**
 *
 * @author Prabhashi
 */
public class PatientInfoPanel extends javax.swing.JPanel {

    final DateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd");
    private final NumberFormat format = NumberFormat.getInstance(Locale.US);

//    below variables can be set as local variables
    private String query;
    private PreparedStatement statement;
    private ResultSet result;

    private Date date;
    private int id;
    private String name;
    private String gender;
    private int age;
    private String phoneNo;
    private String address;
    private String disease;
    private String comments;
    private String roomType;
    private String roomNo; // the room selected in Edit patient details
    private double roomPrice;
    private int roomId;

//    a global variable
    private String globalRoomNo; // the room selected in patient registration
    private final String STRING_FOR_SELECTED_ROOM = " (selected room)";

    /**
     * Creates new form PatientInfoPanel
     */
    public PatientInfoPanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButtonSaveAllEdit = new javax.swing.JButton();
        jLabel14 = new javax.swing.JLabel();
        jFormattedTextFieldAgeEdit = new javax.swing.JFormattedTextField();
        jLabel15 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextAreaAddressEdit = new javax.swing.JTextArea();
        jLabel21 = new javax.swing.JLabel();
        jButtonDiscardAll = new javax.swing.JButton();
        jTextFieldDiseaseEdit = new javax.swing.JTextField();
        jLabel25 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jComboBoxGenderEdit = new javax.swing.JComboBox();
        jLabel10 = new javax.swing.JLabel();
        jFormattedTextFieldEditID = new javax.swing.JTextField();
        jFormattedTextFieldRegDateEdit = new javax.swing.JFormattedTextField();
        jLabel13 = new javax.swing.JLabel();
        jButtonEdit = new javax.swing.JButton();
        jButtonSearchPatient = new javax.swing.JButton();
        jFormattedTextFieldPhoneNoEdit = new javax.swing.JFormattedTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTextAreaCommentsEdit = new javax.swing.JTextArea();
        jTextFieldNameEdit = new javax.swing.JTextField();
        jLabel20 = new javax.swing.JLabel();
        jComboBoxNameEdit = new javax.swing.JComboBox();
        jButtonCancel = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jFormattedTextFieldPrice = new javax.swing.JFormattedTextField();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        jListRooms = new javax.swing.JList();
        jComboBoxRoomType = new javax.swing.JComboBox();

        setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Patient Information", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Times New Roman", 1, 18))); // NOI18N

        jButtonSaveAllEdit.setText("Save All Changes");
        jButtonSaveAllEdit.setEnabled(false);
        jButtonSaveAllEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSaveAllEditActionPerformed(evt);
            }
        });

        jLabel14.setText("Age :");

        jFormattedTextFieldAgeEdit.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
        jFormattedTextFieldAgeEdit.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        jFormattedTextFieldAgeEdit.setEnabled(false);

        jLabel15.setText("Gender :");

        jTextAreaAddressEdit.setColumns(20);
        jTextAreaAddressEdit.setLineWrap(true);
        jTextAreaAddressEdit.setRows(5);
        jTextAreaAddressEdit.setWrapStyleWord(true);
        jTextAreaAddressEdit.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        jTextAreaAddressEdit.setEnabled(false);
        jScrollPane3.setViewportView(jTextAreaAddressEdit);

        jLabel21.setText("Comments :");

        jButtonDiscardAll.setText("Discard All Changes");
        jButtonDiscardAll.setEnabled(false);
        jButtonDiscardAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDiscardAllActionPerformed(evt);
            }
        });

        jTextFieldDiseaseEdit.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        jTextFieldDiseaseEdit.setEnabled(false);

        jLabel25.setText("Registered Date :");

        jLabel16.setText("Phone No :");

        jComboBoxGenderEdit.setModel(new javax.swing.DefaultComboBoxModel(new String[] { " ", "Male", "Female", "Other" }));
        jComboBoxGenderEdit.setEnabled(false);

        jLabel10.setText("Patient Name :");

        jFormattedTextFieldEditID.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jFormattedTextFieldEditIDKeyReleased(evt);
            }
        });

        jFormattedTextFieldRegDateEdit.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        jFormattedTextFieldRegDateEdit.setEnabled(false);
        jFormattedTextFieldRegDateEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jFormattedTextFieldRegDateEditActionPerformed(evt);
            }
        });

        jLabel13.setText("Name :");

        jButtonEdit.setText("Edit");
        jButtonEdit.setEnabled(false);
        jButtonEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEditActionPerformed(evt);
            }
        });

        jButtonSearchPatient.setText("Search");
        jButtonSearchPatient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSearchPatientActionPerformed(evt);
            }
        });

        jFormattedTextFieldPhoneNoEdit.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
        jFormattedTextFieldPhoneNoEdit.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        jFormattedTextFieldPhoneNoEdit.setEnabled(false);

        jLabel6.setText("Patient ID :");

        jLabel17.setText("Address :");

        jTextAreaCommentsEdit.setColumns(20);
        jTextAreaCommentsEdit.setLineWrap(true);
        jTextAreaCommentsEdit.setRows(5);
        jTextAreaCommentsEdit.setWrapStyleWord(true);
        jTextAreaCommentsEdit.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        jTextAreaCommentsEdit.setEnabled(false);
        jScrollPane4.setViewportView(jTextAreaCommentsEdit);

        jTextFieldNameEdit.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        jTextFieldNameEdit.setEnabled(false);

        jLabel20.setText("Disease :");

        jComboBoxNameEdit.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBoxNameEditItemStateChanged(evt);
            }
        });
        jComboBoxNameEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxNameEditActionPerformed(evt);
            }
        });
        jComboBoxNameEdit.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jComboBoxNameEditKeyReleased(evt);
            }
        });

        jButtonCancel.setText("Cancel");
        jButtonCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCancelActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Room Information", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP));

        jLabel7.setText("Price (per day) Rs :");

        jFormattedTextFieldPrice.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,##0.00"))));
        jFormattedTextFieldPrice.setEnabled(false);

        jLabel1.setText("Room Type :");

        jListRooms.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jListRooms.setEnabled(false);
        jListRooms.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jListRoomsValueChanged(evt);
            }
        });
        jScrollPane5.setViewportView(jListRooms);

        jComboBoxRoomType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Normal", "Medium", "VIP" }));
        jComboBoxRoomType.setEnabled(false);
        jComboBoxRoomType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxRoomTypeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(52, 52, 52)
                                .addComponent(jComboBoxRoomType, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addGap(29, 29, 29)
                                .addComponent(jFormattedTextFieldPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxRoomType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(13, 13, 13)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(jFormattedTextFieldPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jFormattedTextFieldEditID, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel10)
                        .addGap(18, 18, 18)
                        .addComponent(jComboBoxNameEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(36, 36, 36)
                        .addComponent(jButtonSearchPatient))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel25)
                            .addComponent(jLabel13)
                            .addComponent(jLabel14)
                            .addComponent(jLabel15)
                            .addComponent(jLabel16)
                            .addComponent(jLabel17)
                            .addComponent(jLabel20)
                            .addComponent(jLabel21))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 222, Short.MAX_VALUE)
                            .addComponent(jFormattedTextFieldPhoneNoEdit)
                            .addComponent(jComboBoxGenderEdit, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jFormattedTextFieldAgeEdit)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jButtonEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(24, 24, 24)
                                .addComponent(jButtonSaveAllEdit))
                            .addComponent(jScrollPane4)
                            .addComponent(jFormattedTextFieldRegDateEdit)
                            .addComponent(jTextFieldNameEdit)
                            .addComponent(jTextFieldDiseaseEdit))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(33, 33, 33)
                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(jButtonDiscardAll)
                                .addGap(18, 18, 18)
                                .addComponent(jButtonCancel)))))
                .addContainerGap(70, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jFormattedTextFieldEditID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10)
                    .addComponent(jComboBoxNameEdit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonSearchPatient))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel25)
                            .addComponent(jFormattedTextFieldRegDateEdit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel13)
                            .addComponent(jTextFieldNameEdit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel14)
                            .addComponent(jFormattedTextFieldAgeEdit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel15)
                            .addComponent(jComboBoxGenderEdit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel16)
                            .addComponent(jFormattedTextFieldPhoneNoEdit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel17)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextFieldDiseaseEdit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel20))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel21))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonEdit)
                    .addComponent(jButtonSaveAllEdit)
                    .addComponent(jButtonDiscardAll)
                    .addComponent(jButtonCancel))
                .addContainerGap(82, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jFormattedTextFieldEditIDKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jFormattedTextFieldEditIDKeyReleased
        String val = jFormattedTextFieldEditID.getText();

//        TODO Fix bug: reset is done even if an arrow key is pressed
        resetFormEdit();

        setFieldsEnabled(false);

        jButtonEdit.setEnabled(false);

        if (isPositiveInteger(val)) {
            id = Integer.parseInt(jFormattedTextFieldEditID.getText());
            try (Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/hospital", "root", null)) {
                query = "select * from patient where id = ?";
                statement = connection.prepareStatement(query);
                statement.setInt(1, id);
                result = statement.executeQuery();

                if (result.next()) {
                    name = result.getString("name");
//                    TODO change name selected
//                    jComboBoxNameEdit.setSelectedItem(name);
                    jComboBoxNameEdit.setSelectedItem(name + " - " + id);

                } else {
                    jComboBoxNameEdit.setSelectedIndex(-1);
                }

            } catch (Exception e) {

            }
        } else {
            jComboBoxNameEdit.setSelectedIndex(-1);
        }
    }//GEN-LAST:event_jFormattedTextFieldEditIDKeyReleased

    private void jFormattedTextFieldRegDateEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jFormattedTextFieldRegDateEditActionPerformed

    }//GEN-LAST:event_jFormattedTextFieldRegDateEditActionPerformed

    private void jButtonEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEditActionPerformed

        setFieldsEnabled(true);

        //        jComboBoxNameEdit.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "- - Select Name - -", "m 2", "tem 3", "em 4" }));
        jComboBoxGenderEdit.setModel(new javax.swing.DefaultComboBoxModel(new String[]{"Male", "Female", "Other"}));
    }//GEN-LAST:event_jButtonEditActionPerformed

    private void jButtonSearchPatientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSearchPatientActionPerformed
        if (jFormattedTextFieldEditID.getText().equals("")) {
            if (jComboBoxNameEdit.getSelectedIndex() == -1) {
                jButtonEdit.setEnabled(false);
                JOptionPane.showMessageDialog(null, "Enter Patient ID or Name!");
            } else {
                //if Name is selected and id is not selected
                String nameSelected = jComboBoxNameEdit.getSelectedItem().toString();
//                ***************************
                String[] values = nameSelected.split(" - ");
                name = values[0];
                id = Integer.parseInt(values[1]);
                setFieldValues("select * from patient as p inner join room as r on p.room_id=r.id where p.id = ?", id);
            }
        } else {
            //if id is selected
            id = Integer.parseInt(jFormattedTextFieldEditID.getText());
            setFieldValues("select * from patient as p inner join room as r on p.room_id=r.id where p.id = ?", id);
        }
    }//GEN-LAST:event_jButtonSearchPatientActionPerformed

    private void jComboBoxNameEditItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBoxNameEditItemStateChanged
        resetFormEdit();
        setFieldsEnabled(false);
        jButtonEdit.setEnabled(false);
    }//GEN-LAST:event_jComboBoxNameEditItemStateChanged

    private void jComboBoxNameEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxNameEditActionPerformed

        if (jComboBoxNameEdit.getSelectedIndex() != -1) {
            String nameSelected = jComboBoxNameEdit.getSelectedItem().toString();
//            ******************************************
            String[] values = nameSelected.split(" - ");
            name = values[0];
            String id = values[1];

            jFormattedTextFieldEditID.setText(id);

        }
    }//GEN-LAST:event_jComboBoxNameEditActionPerformed

    private void jComboBoxNameEditKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jComboBoxNameEditKeyReleased

    }//GEN-LAST:event_jComboBoxNameEditKeyReleased

    private void jButtonSaveAllEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSaveAllEditActionPerformed
        patientEdit();
    }//GEN-LAST:event_jButtonSaveAllEditActionPerformed

    private void jButtonDiscardAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDiscardAllActionPerformed
        id = Integer.parseInt(jFormattedTextFieldEditID.getText());
        setFieldValues("select * from patient as p inner join room as r on p.room_id=r.id where p.id = ?", id);
    }//GEN-LAST:event_jButtonDiscardAllActionPerformed

    private void jButtonCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCancelActionPerformed
        resetFormEdit();
        MainInterface.setDefaultLayout();
    }//GEN-LAST:event_jButtonCancelActionPerformed

    private void jComboBoxRoomTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxRoomTypeActionPerformed
        roomType = jComboBoxRoomType.getSelectedItem().toString();
        jFormattedTextFieldPrice.setText("");
        addModelToJList(roomType, globalRoomNo);
    }//GEN-LAST:event_jComboBoxRoomTypeActionPerformed

    private void jListRoomsValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jListRoomsValueChanged
        if (!evt.getValueIsAdjusting()) { // To perform actions when value adjusting is over

            try (Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/hospital", "root", null)) {
                if (jListRooms.getSelectedIndex() != -1) {
                    roomNo = jListRooms.getSelectedValue().toString();

                    if (roomNo.equals(globalRoomNo + STRING_FOR_SELECTED_ROOM)) {
                        roomNo = globalRoomNo;
                    }

                    query = "Select * from room where room_no=?";
                    statement = connection.prepareStatement(query);
                    statement.setString(1, roomNo);
                    result = statement.executeQuery();

                    if (result.next()) {
                        roomPrice = result.getDouble("price");
                    }
                    jFormattedTextFieldPrice.setText(format.format(roomPrice));

                }

            } catch (Exception e) {
                System.out.println(e);
            }

        }

    }//GEN-LAST:event_jListRoomsValueChanged

    public void addModelToJList(String item, String roomNo) {
        try (Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/hospital", "root", null)) {
            query = "Select * from room where room_type=? and is_available=1";
            statement = connection.prepareStatement(query);
            statement.setString(1, item);
            result = statement.executeQuery();

            String roomNum;
            DefaultListModel model = new DefaultListModel();

            while (result.next()) {
                roomNum = result.getString("room_no");
                model.addElement(roomNum);
            }

//            if (roomNo != null) {
            query = "Select * from room where room_type=? and room_no=?";
            statement = connection.prepareStatement(query);
            statement.setString(1, item);
            statement.setString(2, roomNo);

            result = statement.executeQuery();

            if (result.next()) {
                model.addElement(roomNo + STRING_FOR_SELECTED_ROOM);
            }
//            }

            jListRooms.setModel(model);

        } catch (Exception e) {
            System.out.println(e);
        }
    }

    public void patientEdit() {
        id = Integer.parseInt(jFormattedTextFieldEditID.getText());

        if (jTextFieldNameEdit.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Please enter the name!");
        } else if (jFormattedTextFieldAgeEdit.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Please enter the age!");
        } else if (jListRooms.getSelectedIndex() == -1) {
            JOptionPane.showMessageDialog(null, "Please select a room!");
        } else {
            try (
                    Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/hospital", "root", null)) {

                roomNo = jListRooms.getSelectedValue().toString();

                if (roomNo.equals(globalRoomNo + STRING_FOR_SELECTED_ROOM)) {
                    roomNo = globalRoomNo;
                }

                query = "Select * from room where room_no=?";
                statement = connection.prepareStatement(query);
                statement.setString(1, roomNo);
                result = statement.executeQuery();

//                int roomId;
                if (result.next()) {
                    roomId = result.getInt("id");
                }

                query = "Update Patient set name=?, gender=?, age=?, phone_no=?, address=?, disease=?, comments=?, room_id=? where id=? ";
                statement = connection.prepareStatement(query);

                statement.setString(1, jTextFieldNameEdit.getText());

                gender = jComboBoxGenderEdit.getSelectedItem().toString();
                statement.setString(2, gender);

                statement.setString(3, jFormattedTextFieldAgeEdit.getText());
                statement.setString(4, jFormattedTextFieldPhoneNoEdit.getText());
                statement.setString(5, jTextAreaAddressEdit.getText());
                statement.setString(6, jTextFieldDiseaseEdit.getText());
                statement.setString(7, jTextAreaCommentsEdit.getText());

                statement.setInt(8, roomId);

                statement.setInt(9, id);

                statement.executeUpdate();

                JOptionPane.showMessageDialog(null, "Changes were successfully added !");
                resetFormEdit();
                MainInterface.setDefaultLayout();

                if (!roomNo.equals(globalRoomNo)) {
                    query = "Update room set is_available=0 where room_no=?";
                    statement = connection.prepareStatement(query);
                    statement.setString(1, roomNo);
                    statement.executeUpdate();

                    query = "Update room set is_available=1 where room_no=?";
                    statement = connection.prepareStatement(query);
                    statement.setString(1, globalRoomNo);
                    statement.executeUpdate();

                }

            } catch (Exception e) {
                System.out.println(e);
            }
        }
    }

    private void setFieldValues(String query, Object val) {
        try (Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/hospital", "root", null)) {

            statement = connection.prepareStatement(query);
            if (val instanceof Integer) {
                int i;
                i = (int) val;
                statement.setInt(1, i);
            } else if (val instanceof String) {
                String str = (String) val;
                statement.setString(1, str);
            }

            result = statement.executeQuery();

            if (result.next()) {

                date = result.getDate("register_date");
                id = result.getInt("id");
                name = result.getString("name");
                gender = result.getString("gender");
                age = result.getInt("age");
                phoneNo = result.getString("phone_no");
                address = result.getString("address");
                disease = result.getString("disease");
                comments = result.getString("comments");

                roomType = result.getString("room_type");
                roomNo = result.getString("room_no");
                roomPrice = result.getDouble("price");

                globalRoomNo = roomNo;

                jFormattedTextFieldEditID.setText(Integer.toString(id));
                jFormattedTextFieldRegDateEdit.setText(dateFormat.format(date));
                jTextFieldNameEdit.setText(name);
                jFormattedTextFieldAgeEdit.setText(Integer.toString(age));
                jComboBoxGenderEdit.setSelectedItem(gender);
                jFormattedTextFieldPhoneNoEdit.setText(phoneNo);
                jTextAreaAddressEdit.setText(address);
                jTextFieldDiseaseEdit.setText(disease);
                jTextAreaCommentsEdit.setText(comments);

                jComboBoxNameEdit.setSelectedItem(name + " - " + id);

                jComboBoxRoomType.setSelectedItem(roomType);
                addModelToJList(roomType, globalRoomNo);
                jListRooms.setSelectedValue(roomNo + STRING_FOR_SELECTED_ROOM, true);

                jFormattedTextFieldPrice.setText(Double.toString(roomPrice));

                jButtonEdit.setEnabled(true);

            } else {
                jButtonEdit.setEnabled(false);
                if (val instanceof Integer) {
                    JOptionPane.showMessageDialog(null, "Invalid Patient ID !");

                } else if (val instanceof String) {
                    JOptionPane.showMessageDialog(null, "Invalid Patient Name !");

                }
            }

        } catch (Exception e) {
            System.out.println(e);
        }
    }

    public void resetFormEdit() {
        jFormattedTextFieldRegDateEdit.setText("");
        jTextFieldNameEdit.setText("");
        jFormattedTextFieldAgeEdit.setText("");
        jComboBoxGenderEdit.setSelectedIndex(0);
        jFormattedTextFieldPhoneNoEdit.setText("");
        jTextAreaAddressEdit.setText("");
        jTextFieldDiseaseEdit.setText("");
        jTextAreaCommentsEdit.setText("");

        jComboBoxRoomType.setSelectedIndex(0);

        jListRooms.setSelectedIndex(-1); //needed?
        DefaultListModel model = new DefaultListModel();
        jListRooms.setModel(model);

        jFormattedTextFieldPrice.setText("");

//        jComboBoxNameEdit.setSelectedItem(name);
    }

    private boolean isPositiveInteger(String str) {
        if (str.equals("")) {
            return false;
        }
        char c;
        for (int i = 0; i < str.length(); i++) {
            c = str.charAt(i);
            if (c > '9' || c < '0') {
                return false;
            }
        }
        return true;
    }

    private void setFieldsEnabled(boolean isEnabled) {
        jTextFieldNameEdit.setEnabled(isEnabled);
        jFormattedTextFieldAgeEdit.setEnabled(isEnabled);
        jComboBoxGenderEdit.setEnabled(isEnabled);
        jFormattedTextFieldPhoneNoEdit.setEnabled(isEnabled);
        jTextAreaAddressEdit.setEnabled(isEnabled);
        jTextFieldDiseaseEdit.setEnabled(isEnabled);
        jTextAreaCommentsEdit.setEnabled(isEnabled);

        jComboBoxRoomType.setEnabled(isEnabled);
        jListRooms.setEnabled(isEnabled);

        jButtonSaveAllEdit.setEnabled(isEnabled);
        jButtonDiscardAll.setEnabled(isEnabled);
    }

    public void setJComboBoxNameEdit(String[] names) {
        jComboBoxNameEdit.setModel(new javax.swing.DefaultComboBoxModel(names));
//        jComboBoxNameEdit.setSelectedIndex(-1);
    }

    public void setJFormattedTextFieldEditID(String text) {
        jFormattedTextFieldEditID.setText(text);
    }

    public void setJComboBoxNameEditIndex(int index) {
        jComboBoxNameEdit.setSelectedIndex(index);
    }

    public void setJButtonsEnable(boolean isEnabled) {
        jButtonEdit.setEnabled(isEnabled);
        jButtonSaveAllEdit.setEnabled(isEnabled);
        jButtonDiscardAll.setEnabled(isEnabled);
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonCancel;
    private javax.swing.JButton jButtonDiscardAll;
    private javax.swing.JButton jButtonEdit;
    private javax.swing.JButton jButtonSaveAllEdit;
    private javax.swing.JButton jButtonSearchPatient;
    private javax.swing.JComboBox jComboBoxGenderEdit;
    private javax.swing.JComboBox jComboBoxNameEdit;
    private javax.swing.JComboBox jComboBoxRoomType;
    private javax.swing.JFormattedTextField jFormattedTextFieldAgeEdit;
    private javax.swing.JTextField jFormattedTextFieldEditID;
    private javax.swing.JFormattedTextField jFormattedTextFieldPhoneNoEdit;
    private javax.swing.JFormattedTextField jFormattedTextFieldPrice;
    private javax.swing.JFormattedTextField jFormattedTextFieldRegDateEdit;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JList jListRooms;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTextArea jTextAreaAddressEdit;
    private javax.swing.JTextArea jTextAreaCommentsEdit;
    private javax.swing.JTextField jTextFieldDiseaseEdit;
    private javax.swing.JTextField jTextFieldNameEdit;
    // End of variables declaration//GEN-END:variables
}
